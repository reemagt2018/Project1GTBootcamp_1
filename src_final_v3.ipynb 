{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {},
   "outputs": [],
   "source": [
    "# helper functions\n",
    "\n",
    "# get http request headers\n",
    "def getHeaders():\n",
    "    headers = {\n",
    "        \"apikey\":akey,\n",
    "        \"accept\":\"application/json\"\n",
    "    }\n",
    "    return headers\n",
    "\n",
    "\n",
    "# GET /property/address via zip code\n",
    "def fetch(url, params):\n",
    "    headers = getHeaders()\n",
    "    res = requests.get(url, headers=headers, params=params).json()\n",
    "    return res\n",
    "\n",
    "\n",
    "# show load bar and wait for next request\n",
    "def wait(t):    \n",
    "    sys.stdout.write('.')\n",
    "    sys.stdout.flush()\n",
    "    time.sleep(t)\n",
    "    \n",
    "\n",
    "def f(x):\n",
    "    if x >= 10:\n",
    "        return 10\n",
    "    elif x <= 0:\n",
    "        return 1\n",
    "       \n",
    "    else:\n",
    "        return x \n",
    "    \n",
    "\n",
    "def g(x):\n",
    "    if x >= 5:\n",
    "        return 10\n",
    "    elif x <= 0:\n",
    "        return 1\n",
    "    else:\n",
    "        return 5 \n",
    "    \n",
    "    \n",
    "def h(x):\n",
    "    return x['pt_rankStars'] + x['pt_rankStatewidePercentage'] + x['pt_averageStandardScore'] + x['pt_rankMovement'] + x['pt_pupilTeacherRatio']\n",
    "\n",
    "\n",
    "def i(x):\n",
    "    return (x['high_score'] + x['middle_score'] + x['elementary_score']) / 15\n",
    "\n",
    "\n",
    "def k(x):\n",
    "    if x >= 100:\n",
    "        return 10\n",
    "    elif x == 100:\n",
    "        return 7.5\n",
    "    elif x >= 50 and  x < 100:\n",
    "        return 5\n",
    "    elif x > 0 and  x < 50:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "\n",
    "def l(x):\n",
    "    return (x['score_grocery_stores'] + x['score_police_stations'] + x['score_transit_stations'] + x['score_museums']) / 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "import sys\n",
    "import time\n",
    "import json\n",
    "import requests\n",
    "import importlib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pprint import pprint\n",
    "import matplotlib.pyplot as plt\n",
    "from config import gkey, zkey, zws_id, akey"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Target city: atlanta\n",
      "Search radius: 5\n"
     ]
    }
   ],
   "source": [
    "# get list of zipcodes\n",
    "%run ./write_zips.ipynb\n",
    "import zipcodes\n",
    "importlib.reload(zipcodes)\n",
    "required_zips = zipcodes.ziplist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get lat, lng coords from ziplist\n",
    "url = \"https://maps.googleapis.com/maps/api/geocode/json?\"\n",
    "response = []\n",
    "latlngs = []\n",
    "\n",
    "for z in required_zips:\n",
    "    params = {\n",
    "        \"address\":z,\n",
    "        \"key\":gkey\n",
    "    }\n",
    "\n",
    "    res = requests.get(url, params=params).json()\n",
    "    response.append({\"response\":res, \"zipcode\": z})\n",
    "\n",
    "for r in response:\n",
    "    try:\n",
    "        zc = r['zipcode']\n",
    "        lat = r['response']['results'][0]['geometry']['location']['lat']\n",
    "        lng = r['response']['results'][0]['geometry']['location']['lng']\n",
    "        \n",
    "        latlngs.append({\n",
    "            \"lat\":lat,\n",
    "            \"lng\":lng,\n",
    "            \"zipcode\":zc\n",
    "        })\n",
    "\n",
    "    except:\n",
    "        continue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neighborhood Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "............................................................................................................................................"
     ]
    }
   ],
   "source": [
    "base_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n",
    "ttypes = ['grocery_or_supermarket', 'police', 'transit_station', 'museum']\n",
    "\n",
    "zipcodes = []\n",
    "target_coordinates = []\n",
    "\n",
    "museums = []\n",
    "grocery_stores = []\n",
    "police_stations = []\n",
    "transit_stations = []\n",
    "\n",
    "sys.stdout.write('working..')\n",
    "\n",
    "for l in latlngs:\n",
    "    curzip = l['zipcode']\n",
    "    curlatlng = f\"{l['lat']},{l['lng']}\"\n",
    "    \n",
    "    for i,t in enumerate(ttypes):\n",
    "        curtype = t\n",
    "        \n",
    "        params = {\n",
    "            \"target_search\": curtype,\n",
    "            \"location\": curlatlng,\n",
    "            \"radius\": 1609, # TODO: pull this in for dynamic search radius\n",
    "            \"type\": curtype,\n",
    "            \"key\":gkey\n",
    "        }\n",
    "\n",
    "        response = requests.get(base_url, params=params).json()\n",
    "\n",
    "        wait(0)\n",
    "        \n",
    "        # populate list items\n",
    "        for item in response[\"results\"]:\n",
    "            if(i == 0):\n",
    "                grocery_stores.append({\n",
    "                    \"zipcode\":curzip,    \"loc\":  curlatlng,\n",
    "                    \"item\":item[\"name\"], \"type\": curtype\n",
    "                })\n",
    "            elif(i == 1):\n",
    "                police_stations.append({\n",
    "                    \"zipcode\":curzip,    \"loc\":  curlatlng,\n",
    "                    \"item\":item[\"name\"], \"type\": curtype\n",
    "                })\n",
    "            elif(i == 2):\n",
    "                transit_stations.append({\n",
    "                    \"zipcode\":curzip,    \"loc\":  curlatlng,\n",
    "                    \"item\":item[\"name\"], \"type\": curtype\n",
    "                })\n",
    "            else:\n",
    "                museums.append({\n",
    "                    \"zipcode\":curzip,    \"loc\":  curlatlng,\n",
    "                    \"item\":item[\"name\"], \"type\": curtype\n",
    "                })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# generate dataframes\n",
    "gdf = pd.DataFrame(grocery_stores)\n",
    "tdf = pd.DataFrame(transit_stations)\n",
    "pdf = pd.DataFrame(police_stations)\n",
    "mdf = pd.DataFrame(museums)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [],
   "source": [
    "# group data by zipcode\n",
    "grocery_count = gdf[['item', 'zipcode']].groupby('zipcode').count()\n",
    "transit_count = tdf[['item', 'zipcode']].groupby('zipcode').count()\n",
    "police_count = pdf[['item', 'zipcode']].groupby('zipcode').count()\n",
    "museum_count = mdf[['item', 'zipcode']].groupby('zipcode').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge dataframes\n",
    "gt_count = grocery_count.merge(transit_count, on='zipcode')\n",
    "gt_count = gt_count.rename(columns={\n",
    "    \"item_x\":\"num_grocery_stores\",\n",
    "    \"item_y\":\"num_transit_stations\"\n",
    "})\n",
    "\n",
    "gtp_count = gt_count.merge(police_count, on='zipcode')\n",
    "gtp_count = gtp_count.rename(columns={\n",
    "    \"item\":\"num_police_stations\"\n",
    "})\n",
    "\n",
    "gtpm_count = gtp_count.merge(museum_count, on=\"zipcode\")\n",
    "gtpm_count = gtpm_count.rename(columns={\n",
    "    \"item\":\"num_museums\"\n",
    "})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 428,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract grocery stores, police stations, museums, transit stations and assign scores\n",
    "average_grocery = gtpm_count[\"num_grocery_stores\"].mean()\n",
    "average_police = gtpm_count[\"num_police_stations\"].mean()\n",
    "average_museum = gtpm_count[\"num_museums\"].mean()\n",
    "average_transit_station = gtpm_count[\"num_transit_stations\"].mean()\n",
    "\n",
    "# assign scores\n",
    "gtpm_count[\"avg_grocery_stores\"] = (gtpm_count[\"num_grocery_stores\"]/average_grocery*100).fillna(0.0).astype(int)\n",
    "gtpm_count[\"avg_police_stations\"] = (gtpm_count[\"num_police_stations\"]/average_police*100).fillna(0.0).astype(int)\n",
    "gtpm_count[\"avg_transit_stations\"] = (gtpm_count[\"num_transit_stations\"]/average_transit_station*100).fillna(0.0).astype(int)\n",
    "gtpm_count[\"avg_museums\"] = (gtpm_count[\"num_museums\"]/average_museum*100 ).fillna(0.0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "metadata": {},
   "outputs": [],
   "source": [
    "gtpm_count[\"score_grocery_stores\"] = gtpm_count.apply(lambda row: k(row['avg_grocery_stores']), axis=1)\n",
    "gtpm_count[\"score_police_stations\"] = gtpm_count.apply(lambda row: k(row['avg_police_stations']), axis=1)\n",
    "gtpm_count[\"score_transit_stations\"] = gtpm_count.apply(lambda row: k(row['avg_transit_stations']), axis=1)\n",
    "gtpm_count[\"score_museums\"] = gtpm_count.apply(lambda row: k(row['avg_museums']), axis=1)\n",
    "gtpm_count[\"total_score\"] = gtpm_count.apply(lambda row: l(row), axis=1)\n",
    "gtpm_count = gtpm_count.drop(columns=['num_grocery_stores','num_police_stations','num_transit_stations','num_museums',\n",
    "                                      'avg_grocery_stores','avg_police_stations','avg_transit_stations','avg_museums'])\n",
    "# gtpm_count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Price Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "working............................................................................................................................................................................................................................................................................................................................."
     ]
    }
   ],
   "source": [
    "# get properties for each zip code (10 queries/min)\n",
    "url = \"https://search.onboard-apis.com/propertyapi/v1.0.0/assessment/detail?\"\n",
    "property_results = []\n",
    "prop_types = ['RESIDENTIAL (NEC)', 'CONDOMINIUM', \n",
    "              'APARTMENT', 'CABIN', 'DUPLEX', \n",
    "              'MANUFACTURED HOME', 'MOBILE HOME',\n",
    "              'TRIPLEX', 'TOWNHOUSE/ROWHOUSE']\n",
    "\n",
    "sys.stdout.write('working..')\n",
    "\n",
    "for z in latlngs:\n",
    "    curzip = z['zipcode']\n",
    "    \n",
    "    for pt in prop_types:\n",
    "        curpt = pt\n",
    "\n",
    "        params = {\n",
    "            \"postalcode\": curzip,\n",
    "            \"propertytype\": curpt\n",
    "        }\n",
    "\n",
    "        res = fetch(url, params)\n",
    "\n",
    "        property_results.append(res)\n",
    "        wait(8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {},
   "outputs": [],
   "source": [
    "props_data = []\n",
    "for p in property_results:\n",
    "    try:\n",
    "        for q in p['property']:\n",
    "            props_data.append(q)\n",
    "    except Exception as e:\n",
    "        continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "prop_res = []\n",
    "for p in property_results:\n",
    "    try:\n",
    "        for q in p['property']:\n",
    "            zipcode = q['address']['postal1']\n",
    "            mkt_val = q['assessment']['market']['mktttlvalue']\n",
    "            prop_res.append({\"zipcode\":zipcode, \"mkt_val\":mkt_val})\n",
    "    except Exception as e:\n",
    "        print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "metadata": {},
   "outputs": [],
   "source": [
    "prop_df = pd.DataFrame(prop_res)\n",
    "avg_mkt_val = round(prop_df.groupby(['zipcode']).sum() / len(prop_res), 2)\n",
    "# avg_mkt_val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {},
   "outputs": [],
   "source": [
    "price_neighborhood_final_df = gtpm_count.merge(avg_mkt_val, on=\"zipcode\") \\\n",
    "    .rename(columns={\"mkt_val\":\"avg_mkt_val\"})\n",
    "\n",
    "price_neighborhood_final_df = price_neighborhood_final_df.drop(columns=[\n",
    "    'score_grocery_stores','score_police_stations','score_transit_stations','score_museums','total_score'])\n",
    "price_neighborhood_final_df = price_neighborhood_final_df.drop(['30317','30375'])\n",
    "price_neighborhood_final_df = price_neighborhood_final_df.reset_index()\n",
    "price_neighborhood_final_df = price_neighborhood_final_df.sort_values(by=['avg_mkt_val'], ascending=False)\n",
    "# price_neighborhood_final_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# School Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Inititalize arrays for all the various parameters returned from response of call that is needed\n",
    "postal = []\n",
    "schoolLevel = []\n",
    "rankStars = []\n",
    "rankStatewidePercentage = []\n",
    "averageStandardScore = []\n",
    "rankMovement = []\n",
    "pupilTeacherRatio = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "school_base_url=\"https://api.schooldigger.com/v1.1/schools?\"\n",
    "\n",
    "for zip in required_zips:\n",
    "    params = {\n",
    "        \"appID\":'cdcbd9a2',\n",
    "        \"appKey\":'f21463a388bc041e25afa5dc32fb5014',\n",
    "        \"st\":'GA',\n",
    "        \"zip\":zip\n",
    "    }\n",
    "\n",
    "    # assemble url and make API request\n",
    "    response = requests.get(school_base_url, params=params).json()\n",
    "    response_df = pd.DataFrame(response)\n",
    "    \n",
    "    numberofresults = len(response_df)\n",
    "    for i in range(numberofresults):\n",
    "        schoolLevel.append(response_df[\"schoolList\"][i].get(\"schoolLevel\",np.nan))\n",
    "        rankMovement.append(response_df[\"schoolList\"][i].get(\"rankMovement\",np.nan))\n",
    "        postal.append(response_df[\"schoolList\"][i][\"address\"].get(\"zip\",np.nan))            \n",
    "\n",
    "        try:\n",
    "            rankStars.append(response_df[\"schoolList\"][i][\"rankHistory\"][0].get(\"rankStars\",np.nan))\n",
    "            rankStatewidePercentage.append(response_df[\"schoolList\"][i][\"rankHistory\"][0].get(\"rankStatewidePercentage\",np.nan))\n",
    "            averageStandardScore.append(response_df[\"schoolList\"][i][\"rankHistory\"][0].get(\"averageStandardScore\",np.nan))\n",
    "\n",
    "        except (KeyError, IndexError, TypeError):\n",
    "            rankStars.append(np.nan)\n",
    "            rankStatewidePercentage.append(np.nan)\n",
    "            averageStandardScore.append(np.nan)\n",
    "                \n",
    "        try:    \n",
    "            pupilTeacherRatio.append(response_df[\"schoolList\"][i][\"schoolYearlyDetails\"][0].get(\"pupilTeacherRatio\",np.nan))\n",
    "    \n",
    "        except (KeyError, IndexError, TypeError):\n",
    "            pupilTeacherRatio.append(np.nan)\n",
    "\n",
    "        time.sleep(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a data frame from all schools\n",
    "school_dict = {\n",
    "    \"postal\":postal,\n",
    "    \"schoolLevel\":schoolLevel,\n",
    "    \"rankStars\":rankStars,\n",
    "    \"rankStatewidePercentage\":rankStatewidePercentage,\n",
    "    \"averageStandardScore\":averageStandardScore,\n",
    "    \"rankMovement\":rankMovement,\n",
    "    \"pupilTeacherRatio\":pupilTeacherRatio\n",
    "}\n",
    "\n",
    "school_dict_pd = pd.DataFrame(school_dict)\n",
    "school_dict_pd.replace(np.nan, 0, inplace=True)\n",
    "school_dict_pd = school_dict_pd[school_dict_pd['postal'] != '99999']\n",
    "# school_dict_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [],
   "source": [
    "# seperate middle, elementary and high and assign scores\n",
    "school_elementary_pd = school_dict_pd[school_dict_pd['schoolLevel'] == 'Elementary']\n",
    "school_elementary_pd = school_elementary_pd.copy()\n",
    "averagerankStars = school_elementary_pd[\"rankStars\"].mean()\n",
    "\n",
    "avergaerankStatewidePercentage = school_elementary_pd[\"rankStatewidePercentage\"].mean()\n",
    "avergaeaverageStandardScore = school_elementary_pd[\"averageStandardScore\"].mean()\n",
    "avergaerankMovement = school_elementary_pd[\"rankMovement\"].mean()\n",
    "avergaepupilTeacherRatio = school_elementary_pd[\"pupilTeacherRatio\"].mean()\n",
    "\n",
    "# Assign scores\n",
    "school_elementary_pd[\"pg_avg_rankStars\"] = (school_elementary_pd[\"rankStars\"]/averagerankStars *10).fillna(0.0).astype(int)\n",
    "school_elementary_pd[\"pg_avg_rankStatewidePercentage\"] = (school_elementary_pd[\"rankStatewidePercentage\"]/avergaerankStatewidePercentage *10).fillna(0.0).astype(int)\n",
    "school_elementary_pd[\"pg_avg_averageStandardScore\"] = (school_elementary_pd[\"averageStandardScore\"]/avergaeaverageStandardScore *10).fillna(0.0).astype(int)\n",
    "school_elementary_pd[\"pg_avg_rankMovement\"] = school_elementary_pd[\"rankMovement\"]/avergaerankMovement *10\n",
    "school_elementary_pd[\"pg_avg_pupilTeacherRatio\"] = (school_elementary_pd[\"pupilTeacherRatio\"]/avergaepupilTeacherRatio *10).fillna(0.0).astype(int)\n",
    "\n",
    "school_elementary_pd['pt_rankStars'] = school_elementary_pd.apply(lambda row: f(row['pg_avg_rankStars']), axis=1)\n",
    "school_elementary_pd['pt_rankStatewidePercentage'] = school_elementary_pd.apply(lambda row: f(row['pg_avg_rankStatewidePercentage']), axis=1)\n",
    "school_elementary_pd['pt_averageStandardScore'] = school_elementary_pd.apply(lambda row: f(row['pg_avg_averageStandardScore']), axis=1)\n",
    "school_elementary_pd['pt_rankMovement'] = school_elementary_pd.apply(lambda row: g(row['rankMovement']), axis=1)\n",
    "school_elementary_pd['pt_pupilTeacherRatio'] = school_elementary_pd.apply(lambda row: f(row['pg_avg_pupilTeacherRatio']), axis=1)\n",
    "school_elementary_pd['total_points'] = school_elementary_pd.apply(lambda row: h(row),axis=1)\n",
    "school_elementary_points = school_elementary_pd[['postal','total_points']]\n",
    "elementary_groupby = school_elementary_points.groupby('postal').mean()\n",
    "# school_elementary_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [],
   "source": [
    "# seperate middle, middle and high and assign scores\n",
    "school_middle_pd = school_dict_pd[school_dict_pd['schoolLevel']=='Middle']\n",
    "school_middle_pd = school_middle_pd.copy()\n",
    "averagerankStars = school_middle_pd[\"rankStars\"].mean()\n",
    "avergaerankStatewidePercentage = school_middle_pd[\"rankStatewidePercentage\"].mean()\n",
    "avergaeaverageStandardScore = school_middle_pd[\"averageStandardScore\"].mean()\n",
    "avergaerankMovement = school_middle_pd[\"rankMovement\"].mean()\n",
    "avergaepupilTeacherRatio = school_middle_pd[\"pupilTeacherRatio\"].mean()\n",
    "\n",
    "# Assign scores\n",
    "school_middle_pd[\"pg_avg_rankStars\"] = (school_middle_pd[\"rankStars\"]/averagerankStars *10).fillna(0.0).astype(int)\n",
    "school_middle_pd[\"pg_avg_rankStatewidePercentage\"] = (school_middle_pd[\"rankStatewidePercentage\"]/avergaerankStatewidePercentage *10).fillna(0.0).astype(int)\n",
    "school_middle_pd[\"pg_avg_averageStandardScore\"] = (school_middle_pd[\"averageStandardScore\"]/avergaeaverageStandardScore *10).fillna(0.0).astype(int)\n",
    "school_middle_pd[\"pg_avg_rankMovement\"] = school_middle_pd[\"rankMovement\"]/avergaerankMovement *10\n",
    "school_middle_pd[\"pg_avg_pupilTeacherRatio\"] = (school_middle_pd[\"pupilTeacherRatio\"]/avergaepupilTeacherRatio *10).fillna(0.0).astype(int)\n",
    "\n",
    "school_middle_pd['pt_rankStars'] = school_middle_pd.apply(lambda row: f(row['pg_avg_rankStars']), axis=1)\n",
    "school_middle_pd['pt_rankStatewidePercentage'] = school_middle_pd.apply(lambda row: f(row['pg_avg_rankStatewidePercentage']), axis=1)\n",
    "school_middle_pd['pt_averageStandardScore'] = school_middle_pd.apply(lambda row: f(row['pg_avg_averageStandardScore']), axis=1)\n",
    "school_middle_pd['pt_rankMovement'] = school_middle_pd.apply(lambda row: g(row['rankMovement']), axis=1)\n",
    "school_middle_pd['pt_pupilTeacherRatio'] = school_middle_pd.apply(lambda row: f(row['pg_avg_pupilTeacherRatio']), axis=1)\n",
    "school_middle_pd['total_points'] = school_middle_pd.apply(lambda row: h(row),axis=1)\n",
    "\n",
    "school_middle_points=school_middle_pd[['postal','total_points']]\n",
    "middle_groupby=school_middle_points.groupby('postal').mean()\n",
    "# middle_groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [],
   "source": [
    "# seperate high, high and high and assign scores\n",
    "school_high_pd = school_dict_pd[school_dict_pd['schoolLevel']=='High']\n",
    "school_high_pd = school_high_pd.copy()\n",
    "averagerankStars = school_high_pd[\"rankStars\"].mean()\n",
    "avergaerankStatewidePercentage = school_high_pd[\"rankStatewidePercentage\"].mean()\n",
    "avergaeaverageStandardScore = school_high_pd[\"averageStandardScore\"].mean()\n",
    "avergaerankMovement = school_high_pd[\"rankMovement\"].mean()\n",
    "avergaepupilTeacherRatio = school_high_pd[\"pupilTeacherRatio\"].mean()\n",
    "\n",
    "# Assign scores\n",
    "school_high_pd[\"pg_avg_rankStars\"] = (school_high_pd[\"rankStars\"]/averagerankStars *10).fillna(0.0).astype(int)\n",
    "school_high_pd[\"pg_avg_rankStatewidePercentage\"] = (school_high_pd[\"rankStatewidePercentage\"]/avergaerankStatewidePercentage *10).fillna(0.0).astype(int)\n",
    "school_high_pd[\"pg_avg_averageStandardScore\"] = (school_high_pd[\"averageStandardScore\"]/avergaeaverageStandardScore *10).fillna(0.0).astype(int)\n",
    "school_high_pd[\"pg_avg_rankMovement\"] = school_high_pd[\"rankMovement\"]/avergaerankMovement *10\n",
    "school_high_pd[\"pg_avg_pupilTeacherRatio\"] = (school_high_pd[\"pupilTeacherRatio\"]/avergaepupilTeacherRatio *10).fillna(0.0).astype(int)\n",
    "\n",
    "school_high_pd['pt_rankStars'] = school_high_pd.apply(lambda row: f(row['pg_avg_rankStars']), axis=1)\n",
    "school_high_pd['pt_rankStatewidePercentage'] = school_high_pd.apply(lambda row: f(row['pg_avg_rankStatewidePercentage']), axis=1)\n",
    "school_high_pd['pt_averageStandardScore'] = school_high_pd.apply(lambda row: f(row['pg_avg_averageStandardScore']), axis=1)\n",
    "school_high_pd['pt_rankMovement'] = school_high_pd.apply(lambda row: g(row['rankMovement']), axis=1)\n",
    "school_high_pd['pt_pupilTeacherRatio'] = school_high_pd.apply(lambda row: f(row['pg_avg_pupilTeacherRatio']), axis=1)\n",
    "school_high_pd['total_points'] = school_high_pd.apply(lambda row: h(row),axis=1)\n",
    "\n",
    "school_high_points = school_high_pd[['postal','total_points']]\n",
    "high_groupby = school_high_points.groupby('postal').mean()\n",
    "# high_groupby"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "metadata": {},
   "outputs": [],
   "source": [
    "zip_final_school_score = []\n",
    "\n",
    "combined_df = pd.merge(high_groupby, middle_groupby, how='outer', on='postal')\n",
    "\n",
    "zip_final_school_score = pd.merge(combined_df, elementary_groupby, how='outer', on='postal')\n",
    "zip_final_school_score.replace(np.nan, 0, inplace=True)\n",
    "zip_final_school_score.rename(columns={'total_points_x': 'high_score','total_points_y': 'middle_score', 'total_points': 'elementary_score'}, inplace=True)\n",
    "zip_final_school_score['final_score'] = zip_final_school_score.apply(lambda row: i(row), axis=1)\n",
    "zip_final_school_score = zip_final_school_score.reset_index()\n",
    "zip_final_school_score = zip_final_school_score.rename(columns={'postal':'zipcode'})\n",
    "zip_final_school_score = zip_final_school_score.sort_values(by=['final_score'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zipcode</th>\n",
       "      <th>avg_mkt_val</th>\n",
       "      <th>school_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30303</td>\n",
       "      <td>136101.63</td>\n",
       "      <td>0.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30313</td>\n",
       "      <td>38016.63</td>\n",
       "      <td>2.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30312</td>\n",
       "      <td>37320.32</td>\n",
       "      <td>3.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30314</td>\n",
       "      <td>30652.85</td>\n",
       "      <td>7.433333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  zipcode  avg_mkt_val  school_score\n",
       "0   30303    136101.63      0.766667\n",
       "1   30313     38016.63      2.733333\n",
       "2   30312     37320.32      3.933333\n",
       "3   30314     30652.85      7.433333"
      ]
     },
     "execution_count": 482,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df = price_neighborhood_final_df.merge(zip_final_school_score, on='zipcode').drop(columns=[\n",
    "    'high_score','middle_score','elementary_score'\n",
    "]).rename(columns={\n",
    "    'total_score':'neighborhood_score',\n",
    "    'final_score':'school_score'\n",
    "})\n",
    "final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['neighborhood_score'] not in index\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-473-a1dd2af13f5c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfinal_combined_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfinal_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'zipcode'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'avg_mkt_val'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'neighborhood_score'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'school_score'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2677\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2678\u001b[0m             \u001b[0;31m# either boolean or fancy integer index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2679\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2680\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2681\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_getitem_array\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2721\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2722\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2723\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_convert_to_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2724\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_take\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2725\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_convert_to_indexer\u001b[0;34m(self, obj, axis, is_setter)\u001b[0m\n\u001b[1;32m   1325\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1326\u001b[0m                     raise KeyError('{mask} not in index'\n\u001b[0;32m-> 1327\u001b[0;31m                                    .format(mask=objarr[mask]))\n\u001b[0m\u001b[1;32m   1328\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1329\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values_from_object\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['neighborhood_score'] not in index\""
     ]
    }
   ],
   "source": [
    "final_combined_df = final_df[['zipcode','avg_mkt_val','neighborhood_score','school_score']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "\n",
    "N = len(zip_final_school_score['zipcode'])\n",
    "ind = np.arange(N)  # the x locations for the groups\n",
    "width = 0.27       # the width of the bars\n",
    "\n",
    "yvals = zip_final_school_score['elementary_score']\n",
    "rects1 = ax.bar(ind, yvals, width, color='r')\n",
    "zvals = zip_final_school_score['middle_score']\n",
    "rects2 = ax.bar(ind+width, zvals, width, color='g')\n",
    "kvals = zip_final_school_score['high_score']\n",
    "rects3 = ax.bar(ind+width*2, kvals, width, color='b')\n",
    "\n",
    "ax.set_ylabel('Scores')\n",
    "\n",
    "ax.set_xticks(ind+width)\n",
    "ax.set_xticklabels( (zip_final_school_score['zipcode']) )\n",
    "ax.legend( (rects1[0], rects2[0], rects3[0]), ('Elementary', 'Middle', 'High'))\n",
    "plt.xticks(rotation=90)\n",
    "def autolabel(rects):\n",
    "    for rect in rects:\n",
    "        h = rect.get_height()\n",
    "        ax.text(rect.get_x()+rect.get_width()/2., 1.05*h, '%d'%int(h),\n",
    "              ha='center', va='bottom')\n",
    "plt.ylim(top=70)\n",
    "autolabel(rects1)\n",
    "autolabel(rects2)\n",
    "autolabel(rects3)\n",
    "plt.savefig('school_results.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 389,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Build Pie Chart\n",
    "# Labels for the sections of our pie chart\n",
    "labels = zip_final_school_score['zipcode']\n",
    "labels\n",
    "# # The values of each section of the pie chart\n",
    "final_score =  zip_final_school_score['final_score']\n",
    "final_score\n",
    "# Creates the pie chart based upon the values above\n",
    "# Automatically finds the percentages of each part of the pie chart\n",
    "plt.pie(final_score, explode=None, labels=labels,\n",
    "       autopct=\"%1.1f%%\", shadow=True, startangle=140)\n",
    "plt.title(\"Final Scores by Zipcode\")\n",
    "plt.axis(\"equal\")\n",
    "# Save Figure\n",
    "plt.savefig(\"./total_School_score_by_zipcode.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [],
   "source": [
    "gtpm_count = gtpm_count.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Build Pie Chart\n",
    "# Labels for the sections of our pie chart\n",
    "labels = gtpm_count['zipcode']\n",
    "labels\n",
    "# # The values of each section of the pie chart\n",
    "final_score = gtpm_count['total_score']\n",
    "final_score\n",
    "# Creates the pie chart based upon the values above\n",
    "# Automatically finds the percentages of each part of the pie chart\n",
    "plt.pie(final_score, explode=None, labels=labels,\n",
    "       autopct=\"%1.1f%%\", shadow=True, startangle=140)\n",
    "plt.title(\"Neighborhood Scores by Zipcode\")\n",
    "plt.axis(\"equal\")\n",
    "# Save Figure\n",
    "plt.savefig(\"./neighborhood_scores.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(price_neighborhood_final_df['zipcode'], price_neighborhood_final_df['avg_mkt_val'])\n",
    "plt.ylabel('Avg Home Value')\n",
    "plt.xlabel('Zip Code')\n",
    "plt.tight_layout()\n",
    "plt.savefig('price_analysis.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111)\n",
    "\n",
    "N = len(final_combined_df['zipcode'])\n",
    "ind = np.arange(N)  # the x locations for the groups\n",
    "width = 0.27       # the width of the bars\n",
    "\n",
    "yvals = final_combined_df['avg_mkt_val'] / 10000\n",
    "rects1 = ax.bar(ind, yvals, width, color='r')\n",
    "zvals = final_combined_df['neighborhood_score']\n",
    "rects2 = ax.bar(ind+width, zvals, width, color='g')\n",
    "kvals = final_combined_df['school_score']\n",
    "rects3 = ax.bar(ind+width*2, kvals, width, color='b')\n",
    "\n",
    "ax.set_ylabel('Scores')\n",
    "\n",
    "ax.set_xticks(ind+width)\n",
    "ax.set_xticklabels( (zip_final_school_score['zipcode']) )\n",
    "ax.legend( (rects1[0], rects2[0], rects3[0]), ('Price (10,000)', 'Neighborhood Score', 'School Score'))\n",
    "plt.xticks(rotation=90)\n",
    "def autolabel(rects):\n",
    "    for rect in rects:\n",
    "        h = rect.get_height()\n",
    "        ax.text(rect.get_x()+rect.get_width()/2., 1.05*h, '%d'%int(h),\n",
    "              ha='center', va='bottom')\n",
    "\n",
    "plt.ylim(top=16)\n",
    "autolabel(rects1)\n",
    "autolabel(rects2)\n",
    "autolabel(rects3)\n",
    "plt.savefig('final_results.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zipcode</th>\n",
       "      <th>score_grocery_stores</th>\n",
       "      <th>score_police_stations</th>\n",
       "      <th>score_transit_stations</th>\n",
       "      <th>score_museums</th>\n",
       "      <th>total_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30302</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30303</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>7.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30308</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>5.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30312</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>8.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30313</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>7.75</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  zipcode  score_grocery_stores  score_police_stations  \\\n",
       "0   30302                    10                     10   \n",
       "1   30303                     1                     10   \n",
       "2   30308                    10                      1   \n",
       "3   30312                     5                     10   \n",
       "4   30313                     1                     10   \n",
       "\n",
       "   score_transit_stations  score_museums  total_score  \n",
       "0                      10             10        10.00  \n",
       "1                      10             10         7.75  \n",
       "2                      10              1         5.50  \n",
       "3                      10             10         8.75  \n",
       "4                      10             10         7.75  "
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gtpm_count.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zipcode</th>\n",
       "      <th>high_score</th>\n",
       "      <th>middle_score</th>\n",
       "      <th>elementary_score</th>\n",
       "      <th>final_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>30316</td>\n",
       "      <td>39.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>8.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30314</td>\n",
       "      <td>37.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>25.500000</td>\n",
       "      <td>7.433333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>30306</td>\n",
       "      <td>0.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>47.500000</td>\n",
       "      <td>6.433333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30307</td>\n",
       "      <td>50.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>45.500000</td>\n",
       "      <td>6.366667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30315</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.833333</td>\n",
       "      <td>4.788889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  zipcode  high_score  middle_score  elementary_score  final_score\n",
       "5   30316        39.0          47.0         48.000000     8.933333\n",
       "3   30314        37.0          49.0         25.500000     7.433333\n",
       "8   30306         0.0          49.0         47.500000     6.433333\n",
       "1   30307        50.0           0.0         45.500000     6.366667\n",
       "4   30315        41.0           0.0         30.833333     4.788889"
      ]
     },
     "execution_count": 397,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zip_final_school_score.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zipcode</th>\n",
       "      <th>avg_mkt_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>30363</td>\n",
       "      <td>261123.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30308</td>\n",
       "      <td>249129.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30303</td>\n",
       "      <td>136101.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30313</td>\n",
       "      <td>38016.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30312</td>\n",
       "      <td>37320.32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  zipcode  avg_mkt_val\n",
       "6   30363    261123.71\n",
       "1   30308    249129.35\n",
       "0   30303    136101.63\n",
       "3   30313     38016.63\n",
       "2   30312     37320.32"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "price_neighborhood_final_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zipcode</th>\n",
       "      <th>avg_mkt_val</th>\n",
       "      <th>neighborhood_score</th>\n",
       "      <th>school_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30303</td>\n",
       "      <td>136101.63</td>\n",
       "      <td>7.75</td>\n",
       "      <td>0.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30313</td>\n",
       "      <td>38016.63</td>\n",
       "      <td>7.75</td>\n",
       "      <td>2.733333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30312</td>\n",
       "      <td>37320.32</td>\n",
       "      <td>8.75</td>\n",
       "      <td>3.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30314</td>\n",
       "      <td>30652.85</td>\n",
       "      <td>5.50</td>\n",
       "      <td>7.433333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  zipcode  avg_mkt_val  neighborhood_score  school_score\n",
       "0   30303    136101.63                7.75      0.766667\n",
       "1   30313     38016.63                7.75      2.733333\n",
       "2   30312     37320.32                8.75      3.933333\n",
       "3   30314     30652.85                5.50      7.433333"
      ]
     },
     "execution_count": 483,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# def z(row):\n",
    "#     return (row['neighboorhood_score'] + row['school_score'] / 2\n",
    "\n",
    "            \n",
    "# final_combined_df[\"final_score\"] = \"\"#final_combined_df.apply(lambda row: z(row), axis=1)\n",
    "final_combined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>zipcode</th>\n",
       "      <th>avg_mkt_val</th>\n",
       "      <th>neighborhood_score</th>\n",
       "      <th>school_score</th>\n",
       "      <th>final_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>30314</td>\n",
       "      <td>30652.85</td>\n",
       "      <td>5.50</td>\n",
       "      <td>7.433333</td>\n",
       "      <td>12.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30312</td>\n",
       "      <td>37320.32</td>\n",
       "      <td>8.75</td>\n",
       "      <td>3.933333</td>\n",
       "      <td>12.683333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>30313</td>\n",
       "      <td>38016.63</td>\n",
       "      <td>7.75</td>\n",
       "      <td>2.733333</td>\n",
       "      <td>10.483333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30303</td>\n",
       "      <td>136101.63</td>\n",
       "      <td>7.75</td>\n",
       "      <td>0.766667</td>\n",
       "      <td>8.516667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  zipcode  avg_mkt_val  neighborhood_score  school_score  final_score\n",
       "3   30314     30652.85                5.50      7.433333    12.933333\n",
       "2   30312     37320.32                8.75      3.933333    12.683333\n",
       "1   30313     38016.63                7.75      2.733333    10.483333\n",
       "0   30303    136101.63                7.75      0.766667     8.516667"
      ]
     },
     "execution_count": 489,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_combined_df ['final_score'] = final_combined_df['neighborhood_score'] \\\n",
    "                                    + final_combined_df['school_score']\n",
    "final_combined_df = final_combined_df.sort_values('final_score', ascending=False)\n",
    "final_combined_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
